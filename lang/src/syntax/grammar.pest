//
// Created by intellij-pest on 2020-03-31
// fs
// Author: kiva
//

unit = { (WHITESPACE | COMMENT | decl | expr)* ~ EOI }

expr = { expr_relational ~ (logical_op ~ expr_relational)* ~ SEMI? }

expr_list = { expr+ }

logical_op = { "&&" | "||" }

relational_op = { "<=" | "<" | ">=" | ">" | "==" | "!=" }

level1_op = { "+" | "-" }

level2_op = { "*" | "/" | "%" }

level3_op = { "^" }

unary_op = { "!" }

expr_relational = { expr_binary_level1 ~ (relational_op ~ expr_binary_level1)* }

expr_binary_level1 = { expr_binary_level2 ~ (level1_op ~ expr_binary_level2)* }

expr_binary_level2 = { expr_binary_level3 ~ (level2_op ~ expr_binary_level3)* }

expr_binary_level3 = { expr_unary ~ (level3_op ~ expr_unary)? }

expr_unary = { unary_op ~ expr_unary
             | expr_atom ~ atom_postfix*
             }

expr_atom = { "(" ~ expr? ~ ")"
            | expr_lambda
            | expr_match
            | literal
            | id
            }

expr_lambda = { normal_lambda | quick_lambda }

normal_lambda = { "{" ~ param ~ "->" ~ expr_list ~ "}" }

quick_lambda = { UNDERLINE ~ quick_lambda_ops ~ UNDERLINE }

quick_lambda_ops = _ { logical_op | relational_op | level1_op | level2_op | level3_op }

atom_postfix = { postfix_apply
               | postfix_member
               }

postfix_apply = { "(" ~ expr ~ ("," ~ expr)* ~ ","? ~ ")" }

postfix_member = { "." ~ id }

param = { id_typed ~ ("," ~ id_typed)* ~ ","? }

expr_match = { "match" ~ expr ~ "{" ~ match_case+ ~ "}" }

match_case = { pattern ~ "=>" ~ expr ~ ","? }

pattern = { literal | UNDERLINE | enum_variant }

literal = { number_lit
          | bool_lit
          | string_lit
          }

number_lit = $ { number_hex
               | number_oct
               | number_bin
               | number_dec
               }

number_dec = _ { ("+" | "-")? ~ ASCII_DIGIT+ }

number_oct = _ { ("+" | "-")? ~ "0o" ~ ASCII_OCT_DIGIT+ }

number_hex = _ { ("+" | "-")? ~ "0x" ~ ASCII_HEX_DIGIT+ }

number_bin = _ { ("+" | "-")? ~ "0b" ~ ASCII_BIN_DIGIT+ }

bool_lit = { "true" | "false" }

string_lit = $ { "\"" ~ (escape | (!("\\" | "\"") ~ ANY)+)* ~ "\""}

escape = _{ "\\\\"
          | "\\\""
          | "\\'"
          | "\\n"
          | "\\r"
          | "\\t"
          }

decl = { let_decl
       | enum_decl
       | trait_decl
       }

let_decl = { "let" ~ id ~ "=" ~ expr ~ SEMI? }

enum_decl = { "enum" ~ id ~ "{" ~ (enum_variant ~ ","?)+ ~ "}" }

enum_variant = { id ~ ("(" ~ (id ~ ","?)* ~ ")")? }

trait_decl = { "trait" ~ id ~ "{" ~ trait_fn* ~ "}" }

trait_fn = { "fn" ~ id ~ "(" ~ param ~ ")" ~ "->" ~ type_ }

type_ = $ { (ASCII_ALPHA_UPPER | UNDERLINE | "$") ~ (ASCII_ALPHANUMERIC | UNDERLINE | "$")* }

id = $ { (ASCII_ALPHA_LOWER | UNDERLINE | "$") ~ (ASCII_ALPHANUMERIC | UNDERLINE | "$")* }

id_typed = { id ~ (":" ~ type_)? }

UNDERLINE = _ { "_" }

SEMI = _ { ";" }

WHITESPACE = _ { " "
               | "\t"
               | WHITE_SPACE
               | NEWLINE
               }

COMMENT = _ { "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }
